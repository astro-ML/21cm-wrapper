window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "Flower", "modulename": "Flower", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Flower.my_module_path", "modulename": "Flower", "qualname": "my_module_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;./21cm-PS&#x27;"}, {"fullname": "Flower.KeyMismatchError", "modulename": "Flower", "qualname": "KeyMismatchError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "Flower.Probability", "modulename": "Flower", "qualname": "Probability", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "Flower.Probability.__init__", "modulename": "Flower", "qualname": "Probability.__init__", "kind": "function", "doc": "<p>Stores the likelihood, priors and the summary statistics</p>\n\n<p>Args:\n    prior_ranges (dict): A dictionary containing the prior ranges for the parameters.\n    z_chunks (int | list[int]): The number of chunks or a list of chunk indices for computing the power spectrum.\n    bins (int): The number of bins for the power spectrum.\n    debug (bool, optional): Whether to enable debug mode. Defaults to True.\n    fmodel_path (str, optional): The path to the fiducial model. Defaults to \"./mcmc_data/fiducial_cone.npy\".\n    summary_statistics (str, optional): The type of summary statistics to compute. Defaults to \"1dps\".</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prior_ranges</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">z_chunks</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">bins</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">fmodel_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./mcmc_data/fiducial_cone.npy&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">summary_statistics</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1dps&#39;</span></span>)</span>"}, {"fullname": "Flower.Probability.dodebug", "modulename": "Flower", "qualname": "Probability.dodebug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Flower.Probability.chunks", "modulename": "Flower", "qualname": "Probability.chunks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Flower.Probability.bins", "modulename": "Flower", "qualname": "Probability.bins", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Flower.Probability.fmodel_path", "modulename": "Flower", "qualname": "Probability.fmodel_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Flower.Probability.prior_ranges", "modulename": "Flower", "qualname": "Probability.prior_ranges", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Flower.Probability.ps", "modulename": "Flower", "qualname": "Probability.ps", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Flower.Probability.sum_stat", "modulename": "Flower", "qualname": "Probability.sum_stat", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Flower.Probability.parameter", "modulename": "Flower", "qualname": "Probability.parameter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Flower.Probability.summary_statistics", "modulename": "Flower", "qualname": "Probability.summary_statistics", "kind": "function", "doc": "<p>Compute the summary statistics based on the specified type.</p>\n\n<p>Args:\n    lightcone (object): The lightcone object.</p>\n\n<p>Returns:\n    object: The computed summary statistics.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lightcone</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Flower.Probability.log_probability", "modulename": "Flower", "qualname": "Probability.log_probability", "kind": "function", "doc": "<p>Compute the log probability.</p>\n\n<p>Args:\n    parameters: The parameters.\n    lightcone: The lightcone object.</p>\n\n<p>Returns:\n    float: The log probability.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parameters</span>, </span><span class=\"param\"><span class=\"n\">lightcone</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Flower.Probability.likelihood", "modulename": "Flower", "qualname": "Probability.likelihood", "kind": "function", "doc": "<p>Compute the likelihood.</p>\n\n<p>Args:\n    lightcone (object): The lightcone object.</p>\n\n<p>Returns:\n    float: The likelihood.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lightcone</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Flower.Probability.prior_emcee", "modulename": "Flower", "qualname": "Probability.prior_emcee", "kind": "function", "doc": "<p>Compute the prior probability using the emcee sampler.</p>\n\n<p>Args:\n    parameters (dict): The parameters.</p>\n\n<p>Returns:\n    int: The prior probability.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Flower.Probability.log_prior_emcee", "modulename": "Flower", "qualname": "Probability.log_prior_emcee", "kind": "function", "doc": "<p>Compute the log prior probability using the emcee sampler.</p>\n\n<p>Args:\n    parameters (dict): The parameters.</p>\n\n<p>Returns:\n    float: The log prior probability.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Flower.Probability.loss", "modulename": "Flower", "qualname": "Probability.loss", "kind": "function", "doc": "<p>Compute the loss function.</p>\n\n<p>Args:\n    test_lc: The test lightcone.\n    fiducial_lc: The fiducial lightcone.</p>\n\n<p>Returns:\n    float: The loss value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">test_lc</span>, </span><span class=\"param\"><span class=\"n\">fiducial_lc</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Flower.Probability.prior_dynasty", "modulename": "Flower", "qualname": "Probability.prior_dynasty", "kind": "function", "doc": "<p>Compute the prior probability using the Dynasty sampler.</p>\n\n<p>Args:\n    parameters (NDArray): The parameters.</p>\n\n<p>Returns:\n    NDArray: The prior probability.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Flower.Probability.ps1d", "modulename": "Flower", "qualname": "Probability.ps1d", "kind": "function", "doc": "<p>Compute the 1D power spectrum.</p>\n\n<p>Args:\n    lightcone (object): The lightcone object.</p>\n\n<p>Returns:\n    object: The computed 1D power spectrum.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lightcone</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Flower.Probability.ps2d", "modulename": "Flower", "qualname": "Probability.ps2d", "kind": "function", "doc": "<p>Compute the 2D power spectrum.</p>\n\n<p>Args:\n    lightcone (object): The lightcone object.</p>\n\n<p>Returns:\n    object: The computed 2D power spectrum.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lightcone</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Flower.Probability.compute_ps2d", "modulename": "Flower", "qualname": "Probability.compute_ps2d", "kind": "function", "doc": "<p>Compute the 2D power spectrum.</p>\n\n<p>Args:\n    data: The data.\n    size: The size of the data.</p>\n\n<p>Returns:\n    tuple: The k_perp, k_par, and the computed 2D power spectrum.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Flower.Probability.debug", "modulename": "Flower", "qualname": "Probability.debug", "kind": "function", "doc": "<p>Print the debug message.</p>\n\n<p>Args:\n    msg: The debug message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Flower.Simulation", "modulename": "Flower", "qualname": "Simulation", "kind": "class", "doc": "<p></p>\n", "bases": "Leaf.Leaf"}, {"fullname": "Flower.Simulation.__init__", "modulename": "Flower", "qualname": "Simulation.__init__", "kind": "function", "doc": "<p>Initializes a Simulation object.</p>\n\n<p>Args:\n    Probability (Probability): The probability object used for computing the log probability.\n    redshift (float): The redshift value for the simulation.\n    data_path (str, optional): The path to the data directory. Defaults to \"./mcmc_data/\".\n    noise_type (tuple, optional): The type of noise to apply to the simulation. Defaults to None.\n    debug (bool, optional): Whether to enable debug mode. Defaults to False.\n    regenerate_fiducial (bool, optional): Whether to regenerate the fiducial lightcone. Defaults to True.\n    **fid_params: Additional parameters for the fiducial model.</p>\n\n<p>Raises:\n    ValueError: If the number of values in the dictionary does not match the length of values_array.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">Probability</span><span class=\"p\">:</span> <span class=\"n\">Flower</span><span class=\"o\">.</span><span class=\"n\">Probability</span>,</span><span class=\"param\">\t<span class=\"n\">redshift</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">data_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./mcmc_data/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">noise_type</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">regenerate_fiducial</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">fid_params</span></span>)</span>"}, {"fullname": "Flower.Simulation.redshift", "modulename": "Flower", "qualname": "Simulation.redshift", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Flower.Simulation.Probability", "modulename": "Flower", "qualname": "Simulation.Probability", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Flower.Simulation.noise", "modulename": "Flower", "qualname": "Simulation.noise", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Flower.Simulation.step", "modulename": "Flower", "qualname": "Simulation.step", "kind": "function", "doc": "<p>Performs a simulation step.</p>\n\n<p>Args:\n    parameters (list[float]): The list of parameters for the simulation.</p>\n\n<p>Returns:\n    float: The log probability of the simulation.</p>\n\n<p>Raises:\n    ValueError: If the number of values in the dictionary does not match the length of values_array.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "Flower.Simulation.gaussian_noise", "modulename": "Flower", "qualname": "Simulation.gaussian_noise", "kind": "function", "doc": "<p>Adds Gaussian noise to the data.</p>\n\n<p>Args:\n    data (NDArray): The input data.\n    mu (float): The mean of the Gaussian distribution.\n    sigma (float): The standard deviation of the Gaussian distribution.</p>\n\n<p>Returns:\n    NDArray: The data with added Gaussian noise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">mu</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Flower.Simulation.replace_values", "modulename": "Flower", "qualname": "Simulation.replace_values", "kind": "function", "doc": "<p>Replace all values in the nested dictionary with the elements of the values_array in order.</p>\n\n<p>Args:\n    nested_dict: A dictionary which may contain other dictionaries as values.\n    values_array: A list of values to replace in the nested dictionary.</p>\n\n<p>Returns:\n    A new dictionary with replaced values.</p>\n\n<p>Raises:\n    ValueError: If the number of values in the dictionary does not match the length of values_array.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nested_dict</span>, </span><span class=\"param\"><span class=\"n\">values_array</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Flower.Flower", "modulename": "Flower", "qualname": "Flower", "kind": "class", "doc": "<p></p>\n", "bases": "Simulation"}, {"fullname": "Flower.Flower.__init__", "modulename": "Flower", "qualname": "Flower.__init__", "kind": "function", "doc": "<p>A class representing a flower simulation.</p>\n\n<p>Args:\n    Probability (Probability): An instance of the Probability class.\n    data_path (str, optional): The path to the data directory. Defaults to \"./mcmc_data/\".\n    noise_type (tuple, optional): The type of noise. Defaults to None.\n    debug (bool, optional): Flag to enable debug mode. Defaults to False.\n    regenerate_fiducial (bool, optional): Flag to regenerate fiducial parameters. Defaults to True.\n    redshift (float, optional): The redshift value. Defaults to 5.5.\n    fid_params (dict, optional): Additional fiducial parameters. Defaults to {}.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">Probability</span><span class=\"p\">:</span> <span class=\"n\">Flower</span><span class=\"o\">.</span><span class=\"n\">Probability</span>,</span><span class=\"param\">\t<span class=\"n\">data_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./mcmc_data/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">noise_type</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">regenerate_fiducial</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">redshift</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">5.5</span>,</span><span class=\"param\">\t<span class=\"n\">fid_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span>)</span>"}, {"fullname": "Flower.Flower.Prob", "modulename": "Flower", "qualname": "Flower.Prob", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Flower.Flower.run_emcee", "modulename": "Flower", "qualname": "Flower.run_emcee", "kind": "function", "doc": "<p>Run the emcee sampling.</p>\n\n<p>Args:\n    filename (str, optional): The filename to save the results. Defaults to \"./results_emcee.h5\".\n    threads (int, optional): The number of threads to use. Defaults to 1.\n    walkers (int, optional): The number of walkers. Defaults to 12.\n    nsteps (int, optional): The number of steps. Defaults to 1000.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./results_emcee.h5&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">walkers</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>,</span><span class=\"param\">\t<span class=\"n\">nsteps</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Flower.Flower.initialize_parameter", "modulename": "Flower", "qualname": "Flower.initialize_parameter", "kind": "function", "doc": "<p>Initialize the parameters.</p>\n\n<p>Args:\n    shape (tuple[int, int]): The shape of the parameters.</p>\n\n<p>Returns:\n    np.ndarray: The initialized parameters.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">shape</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Flower.Flower.run_ns", "modulename": "Flower", "qualname": "Flower.run_ns", "kind": "function", "doc": "<p>Run the nested sampling.</p>\n\n<p>Args:\n    filename (str, optional): The filename to save the results. Defaults to \"./results_dynasty\".\n    threads (int, optional): The number of threads to use. Defaults to 1.\n    npoints (int, optional): The number of live points. Defaults to 250.\n    **dynasty_params: Additional parameters for the nested sampling algorithm.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./results_dynasty&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">npoints</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">250</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">dynasty_params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Leaf", "modulename": "Leaf", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Leaf.logger", "modulename": "Leaf", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger 21cmFAST (INFO)&gt;"}, {"fullname": "Leaf.Leaf", "modulename": "Leaf", "qualname": "Leaf", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "Leaf.Leaf.__init__", "modulename": "Leaf", "qualname": "Leaf.__init__", "kind": "function", "doc": "<p>Initializes the Leaf class with specified parameters.</p>\n\n<p>Args:\n    data_path: The path where output will be saved. Default is \"./data/\"</p>\n\n<pre><code>data_prefix: The prefix for the output files saved in the specified data_path. Default is \"simrun_\".\n\nparameter_file: The file from which to load parameters for all runs. This allows for more control over specific parameters.\n                      If None, standard parameters are used. Default is None.\n\ncache_path: Path for the 21cmFAST cache. If None, don't write cache. This can be faster if fast IO is available, but requires significant memory for large runs.\n                    Recommended to use only if you plan to rerun simulations with the same parameters. Default is False.\n\ndebug: If True, enables verbose output to help identify errors. Default is False.\n\nredshift: The redshift at which the simulation ends\n\nmake_statistics: If true, save key statistics of the simulations\n\n**Parameter for 21cmFAST\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./data/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">data_prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;simrun_&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">parameter_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cache_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">redshift</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">make_statistics</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">astro_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">cosmo_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">user_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">flag_options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">global_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span>)</span>"}, {"fullname": "Leaf.Leaf.data_path", "modulename": "Leaf", "qualname": "Leaf.data_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Leaf.data_prefix", "modulename": "Leaf", "qualname": "Leaf.data_prefix", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Leaf.dodebug", "modulename": "Leaf", "qualname": "Leaf.dodebug", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Leaf.redshift", "modulename": "Leaf", "qualname": "Leaf.redshift", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Leaf.astroparams", "modulename": "Leaf", "qualname": "Leaf.astroparams", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Leaf.cosmoparams", "modulename": "Leaf", "qualname": "Leaf.cosmoparams", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Leaf.flagparams", "modulename": "Leaf", "qualname": "Leaf.flagparams", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Leaf.globalparams", "modulename": "Leaf", "qualname": "Leaf.globalparams", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Leaf.userparams", "modulename": "Leaf", "qualname": "Leaf.userparams", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Leaf.nancounter", "modulename": "Leaf", "qualname": "Leaf.nancounter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Leaf.tau", "modulename": "Leaf", "qualname": "Leaf.tau", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Leaf.filtercounter", "modulename": "Leaf", "qualname": "Leaf.filtercounter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Leaf.make_statistics", "modulename": "Leaf", "qualname": "Leaf.make_statistics", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Leaf.run_box", "modulename": "Leaf", "qualname": "Leaf.run_box", "kind": "function", "doc": "<p>Run a coevel box of 21cmFAST given the parameters.</p>\n\n<p>Args:\n    redshift: Redshift at which the box will be evaluated</p>\n\n<pre><code>save: If True, saves the result as a .h5, else returns the result\n\nrandom_seed: Pass a random seed to the simulator, if none it will be chosen randomly\n\nsanity_check: Corrects for NaNs (NN-interpolation)\n\n**params: Current parameters for the simulation\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">redshift</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">random_seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sanity_check</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">astro_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cosmo_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">user_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">flag_options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">global_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">run_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Leaf.Leaf.run_lightcone", "modulename": "Leaf", "qualname": "Leaf.run_lightcone", "kind": "function", "doc": "<p>Run a coevel box of 21cmFAST given the parameters.</p>\n\n<p>Args:\n    redshift: Redshift at which the box will be evaluated</p>\n\n<pre><code>save: If True, saves the result as a .h5, else returns the result\n\nrandom_seed: Pass a random seed to the simulator, if none it will be chosen randomly\n\nsanity_check: Corrects for NaNs (NN-interpolation)\n\nfilter_peculiar: see function lc_filter\n\n**params: Current parameters for the simulation\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">redshift</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">random_seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sanity_check</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">filter_peculiar</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">astro_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">cosmo_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">user_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">flag_options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">global_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;brightness_temp&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;density&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;xH_box&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">run_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Leaf.Leaf.run_lcsampling", "modulename": "Leaf", "qualname": "Leaf.run_lcsampling", "kind": "function", "doc": "<p>Run a coevel box of 21cmFAST given the parameters.</p>\n\n<p>Args:\n    redshift (float): Redshift at which the box will be evaluated</p>\n\n<pre><code>save (bool): If True, saves the result as a .h5, else returns the result\n\nrandom_seed (int): Pass a random seed to the simulator, if none it will be chosen randomly\n\nsanity_check (bool): Corrects for NaNs (NN-interpolation)\n\nfilter_peculiar (bool): see lc_filter\n\noverride (bool): If True, override existing files\n\nthreads (int): Define how many threads for multiprocessing will be used\n\nmpi (bool): If True, use mpi instead of Python's multiprocessing library (usually not worth it)\n\nquantity (int): Defines the amount of simulations being sampled\n\n*params_range: Give a dict consisting of the parameter as the key and a list passed to the samplefunction\n                e.g. astro_params = {HII_DIM: [140, 160]} for samplef = Leaf.uniform\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">samplef</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">redshift</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">random_seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sanity_check</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">filter_peculiar</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">override</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">mpi</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">quantity</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">astro_params_range</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">cosmo_params_range</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">user_params_range</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">flag_options_range</span><span class=\"o\">=</span><span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">global_params_range</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Leaf.Leaf.run_multilc", "modulename": "Leaf", "qualname": "Leaf.run_multilc", "kind": "function", "doc": "<p>Wrapper to pass dict of arguments to function with Python's multiprocessing lib</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Leaf.Leaf.refresh_params", "modulename": "Leaf", "qualname": "Leaf.refresh_params", "kind": "function", "doc": "<p>Update parameters</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">astro_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">cosmo_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">user_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">flag_options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Leaf.Leaf.debug", "modulename": "Leaf", "qualname": "Leaf.debug", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Leaf.Leaf.nan_adversary", "modulename": "Leaf", "qualname": "Leaf.nan_adversary", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">bt_cone</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">run_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Leaf.Leaf.save", "modulename": "Leaf", "qualname": "Leaf.save", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">direc</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">run_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Leaf.Leaf.load", "modulename": "Leaf", "qualname": "Leaf.load", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path_to_obj</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">lightcone</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "def"}, {"fullname": "Leaf.Leaf.lc_filter", "modulename": "Leaf", "qualname": "Leaf.lc_filter", "kind": "function", "doc": "<p>Apply tau and global nvalueeutral fraction at z=5 (gxH[0]) filters according to\n<a href=\"https://github.com/astro-ML/3D-21cmPIE-Net/blob/main/simulations/runSimulations.py\">https://github.com/astro-ML/3D-21cmPIE-Net/blob/main/simulations/runSimulations.py</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tau</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">gxH0</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">run_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "Leaf.Leaf.generate_run_ids", "modulename": "Leaf", "qualname": "Leaf.generate_run_ids", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">quantity</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Leaf.Leaf.uniform", "modulename": "Leaf", "qualname": "Leaf.uniform", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Leaf.Leaf.gauss", "modulename": "Leaf", "qualname": "Leaf.gauss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mu</span>, </span><span class=\"param\"><span class=\"n\">sig</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Leaf.Leaf.gumbel", "modulename": "Leaf", "qualname": "Leaf.gumbel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">loc</span>, </span><span class=\"param\"><span class=\"n\">scale</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Leaf.Leaf.plot_parameter_distribution", "modulename": "Leaf", "qualname": "Leaf.plot_parameter_distribution", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./data/&#39;</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;simrun_&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Leaf.Parameters", "modulename": "Leaf", "qualname": "Parameters", "kind": "class", "doc": "<p>Auxillary class to initialize and update parameters given a config file or on the fly.</p>\n"}, {"fullname": "Leaf.Parameters.__init__", "modulename": "Leaf", "qualname": "Parameters.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parameter_path</span>, </span><span class=\"param\"><span class=\"n\">file_name</span>, </span><span class=\"param\"><span class=\"n\">data_path</span>, </span><span class=\"param\"><span class=\"n\">override</span>, </span><span class=\"param\"><span class=\"n\">debug</span></span>)</span>"}, {"fullname": "Leaf.Parameters.box", "modulename": "Leaf", "qualname": "Parameters.box", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Parameters.random_seed", "modulename": "Leaf", "qualname": "Parameters.random_seed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Parameters.max_z", "modulename": "Leaf", "qualname": "Parameters.max_z", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Parameters.astro_params", "modulename": "Leaf", "qualname": "Parameters.astro_params", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Parameters.cosmo_params", "modulename": "Leaf", "qualname": "Parameters.cosmo_params", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Parameters.user_params", "modulename": "Leaf", "qualname": "Parameters.user_params", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Parameters.flag_params", "modulename": "Leaf", "qualname": "Parameters.flag_params", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Parameters.global_params", "modulename": "Leaf", "qualname": "Parameters.global_params", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Parameters.data_path", "modulename": "Leaf", "qualname": "Parameters.data_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Parameters.data_name", "modulename": "Leaf", "qualname": "Parameters.data_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Parameters.run_counter", "modulename": "Leaf", "qualname": "Parameters.run_counter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Parameters.override", "modulename": "Leaf", "qualname": "Parameters.override", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Parameters.init_params", "modulename": "Leaf", "qualname": "Parameters.init_params", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Leaf.Parameters.kwargs_update", "modulename": "Leaf", "qualname": "Parameters.kwargs_update", "kind": "function", "doc": "<p>Update the parameter config given kargs</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">kargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Leaf.Parameters.kwargs_revert", "modulename": "Leaf", "qualname": "Parameters.kwargs_revert", "kind": "function", "doc": "<p>Revert changes in the parameters</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Leaf.Parameters.wrap_params", "modulename": "Leaf", "qualname": "Parameters.wrap_params", "kind": "function", "doc": "<p>Change the parameter file to run a single box and revert the changes afterwards.\nThis is necessary or else 21cmfast returns an error.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Leaf.Parameters.randomize", "modulename": "Leaf", "qualname": "Parameters.randomize", "kind": "function", "doc": "<p>Shuffle random_seed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Leaf.Parameters.give_all", "modulename": "Leaf", "qualname": "Parameters.give_all", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Leaf.generate_range", "modulename": "Leaf", "qualname": "generate_range", "kind": "function", "doc": "<p>Helper function which updates every values in a nested dict such that the values [a,b] -> func(*[a,b])</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nested_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "Leaf.fill_dict", "modulename": "Leaf", "qualname": "fill_dict", "kind": "function", "doc": "<p>Helper function to recursively fill a dict given an array</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">nested_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"n\">_ScalarType_co</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "Leaf.num_elements", "modulename": "Leaf", "qualname": "num_elements", "kind": "function", "doc": "<p>Helper function to recursively count the elements in a nested dict</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "Leaf.extract_values", "modulename": "Leaf", "qualname": "extract_values", "kind": "function", "doc": "<p>Helper function to recursively extract all values from a nested dict</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nested_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Leaf.extract_keys", "modulename": "Leaf", "qualname": "extract_keys", "kind": "function", "doc": "<p>Helper function to recursively extract all keys from a nested dict</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nested_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();