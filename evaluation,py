
import numpy as np 
import matplotlib.pyplot as plt  
from scipy.stats import gaussian_kde, kstest, uniform 
from alive_progress import alive_bar  
from sbi.inference.potentials import posterior_estimator_based_potential
from sbi.inference.potentials import likelihood_estimator_based_potential
from sbi.inference.potentials import ratio_estimator_based_potential
import json
import seaborn as sns
from sbi.analysis import conditional_pairplot, conditional_corrcoeff
from logging import info,warning, error

def run_sbc(mcmc_chains, fiducial, save=False):
    lengthd = len(mcmc_chains)
    num_samples = mcmc_chains.shape[1]
    info("Run SBC...")

    dap_samples = mcmc_chains[:,0,:]
    ranks = (mcmc_chains < np.expand_dims(fiducial, axis=1)).sum(axis=1)

    # plot rank statistics
    labels_txt = [r"$L_X$", r"$E_0$", r"$T_\text{vir, ion}$", r"$\zeta$"]
    fig, ax = plt.subplots(1, fiducial.shape[1], figsize=(5 * fiducial.shape[1], 5))
    for i in range(fiducial.shape[1]):
        ax[i].hist(ranks[:, i], bins='auto', range=(0, num_samples), density=True)
        ax[i].set_title(f"{labels_txt[i]}")
        ax[i].set_xlabel("Rank")
    if save:
        fig.savefig(f"rank.png", dpi=400)
    fig.show()

    # ks_pvals: check how uniform the ranks are (frequentist approach)
    kstest_pvals = np.array(
        [
            kstest(rks, uniform(loc=0, scale=num_samples).cdf)[1]
            for rks in ranks.T
        ],
        dtype=np.float32,
    )
    print(kstest_pvals)

    # compute tarp
    labels = fiducial
    bins = int(np.sqrt(num_samples))
    sorted_labels, idx = np.sort(labels, axis=0), np.argsort(labels, axis=0)
    sorted_samples = np.take_along_axis(dap_samples, idx, axis=0)
    fig, ax = plt.subplots(1, fiducial.shape[1], figsize=(5 * fiducial.shape[1], 5), sharey=True)
    h = []
    for i in range(fiducial.shape[1]):
        h.append(ax[i].hist2d(sorted_labels[:, i], sorted_samples[:, i],
                              bins=bins, density=True)[0])
    hmax = np.max(h, axis=(1, 2))
    vmax = np.max(hmax)
    for i in range(fiducial.shape[1]):
        h = ax[i].hist2d(sorted_labels[:, i], sorted_samples[:, i],
                         bins=bins, density=True, vmin=0, vmax=vmax)
        ax[i].plot([0, 1], [0, 1], c='black', linestyle='--', lw=2)
        ax[i].set_title(rf"{labels_txt[i]}")
        ax[i].set_aspect('equal', 'box')
        ax[i].set_xlabel("Truth")
        ax[i].set_ylabel("Predicted")
    fig.tight_layout()
    fig.subplots_adjust(right=0.96)
    cbar_ax = fig.add_axes([0.966, 0.15, 0.01, 0.7])
    fig.colorbar(h[3], cax=cbar_ax, label="Count")
    if save:
        fig.savefig(f"coverage.png", dpi=400)
    fig.show()
    fig.clf()
